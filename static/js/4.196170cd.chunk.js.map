{"version":3,"sources":["utils/validators/validators.ts","common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","children","meta","touched","error","hasError","Textarea","props","input","createField","placeholder","className","type","name","component","validators","validate","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","s","autoFocus","status_inp","onBlur","updateUserStatus","onChange","e","currentTarget","onDoubleClick","ProfileDataForm","initialValues","profile","onSubmit","values","saveProfileF","handleSubmit","htmlType","handleChange","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","ProfileData","style","marginLeft","isOwner","onClick","color","contactTitle","contactValue","Contact","href","target","ProfileInfo","useSelector","ProfilePage","dispatch","useDispatch","formData","a","saveProfile","Preloader","wrapper","ava","src","photos","large","uploadPhoto","photo","files","savePhoto","Post","item","message","like","likeActive","likesCount","AddNewPostsForm","reduxForm","form","textar","MyPosts","memo","postsElements","posts","p","addPosts","newPostText","MyPostsContainer","actions","addPostActionCreator","Profile","bodydiv","width","compose","withRouter","id","refreshProfile","userId","match","params","history","push","getUserProfile","getUserStatus"],"mappings":"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","file":"static/js/4.196170cd.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => void\n\nexport const required: FieldValidatorType = (value) => {\n    if (value)\n        return undefined;\n\n    return \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength)\n        return `Max length is ${maxLength} symbols`;\n\n    return undefined\n}","import React, {FC} from \"react\";\nimport s from \"./FormsControls.module.css\";\nimport {\n    Field,\n    WrappedFieldProps,\n} from \"redux-form\";\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\n\n\nconst FormControl: FC<WrappedFieldProps> = ({children, meta: {touched, error},  }) => {\n    const hasError = touched && error\n    return (\n        <div>\n            {children}\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\n\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\n    //const hasError = props.meta.touched && props.meta.error\n    return (\n        <FormControl {...props}><textarea  {...props.input}/></FormControl>\n    )\n}\n\nexport const Input: FC<WrappedFieldProps> = (props) => {\n    //const hasError = props.meta.touched && props.meta.error\n    return (\n        <FormControl {...props}><input {...props.input}/></FormControl>\n    )\n}\n\n\n\nexport function createField<FormKeysType extends string> (placeholder: string,\n                            className: string,\n                            type: string,\n                            name: FormKeysType,\n                            component: FC<WrappedFieldProps>,\n                            validators: Array<FieldValidatorType>) {\n    return (\n        <div>\n            <Field component={component} className={className} type={type} name={name} placeholder={placeholder}\n                   validate={validators}/>\n        </div>\n    )\n}","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux_store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\ntype MapStatePropsType = ReturnType<typeof mapStateToPropsForRedirect>\n\nexport const withAuthRedirect = (Component: ComponentType) => {\n    class RedirectComponent extends React.Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth ) return <Redirect to={\"/login\"}/>;\n\n            return <Component {...this.props}/>\n        }\n    }\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__3gkcj\",\"ava\":\"ProfileInfo_ava__g_mC6\",\"description\":\"ProfileInfo_description__3misx\",\"job\":\"ProfileInfo_job__2Lzqr\",\"jobphoto\":\"ProfileInfo_jobphoto__1fnum\",\"status\":\"ProfileInfo_status__1yq9H\",\"contacts\":\"ProfileInfo_contacts__2Df88\",\"status_inp\":\"ProfileInfo_status_inp__NWKSE\",\"uploadPhoto\":\"ProfileInfo_uploadPhoto__4Nulm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodydiv\":\"Profile_bodydiv__3htRd\",\"item\":\"Profile_item___3eX6\",\"profile\":\"Profile_profile__3cqbf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textar\":\"MyPosts_textar__C18X5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__A9noA\",\"like\":\"Post_like__DbwHf\",\"likeActive\":\"Post_likeActive__3gc1Q\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\nimport s from \"./ProfileInfo.module.css\";\n\n\ntype MapPropsType = {\n    status: string\n}\ntype DispatchPropsType = {\n    updateUserStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: FC<MapPropsType & DispatchPropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activatedMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivatedMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.status}>\n            {!editMode ?\n                <div onDoubleClick={activatedMode}>\n                    <span>Status : {!props.status ? \"нет статуса\" : props.status}</span>\n                </div>\n                : <div>\n                    <input autoFocus={true}\n                           className={s.status_inp}\n                           onBlur={deactivatedMode}\n                           onChange={onStatusChange}\n                           value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks","import s from \"./ProfileInfo.module.css\";\nimport React, {ChangeEvent, FC, useState} from \"react\";\nimport Preloader from \"../../../common/prelooader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux_store\";\nimport {savePhoto, saveProfile, updateUserStatus} from \"../../../redux/profile_reducer\";\nimport {ProfileType} from \"../../../types/types\";\nimport {Button} from \"antd\";\nimport {Form, Formik} from \"formik\";\nimport {Checkbox, Input} from \"formik-antd\";\n\ntype MapStatePropsType = {\n    isOwner: boolean\n}\nconst ProfileInfo: FC<MapStatePropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n\n    const profile = useSelector((state: AppStateType) => state.ProfilePage.profile) as ProfileType\n    const status = useSelector((state: AppStateType) => state.ProfilePage.status)\n\n    const dispatch = useDispatch()\n\n    const updateUserStatusF = (status: string) => {\n        dispatch(updateUserStatus(status))\n    }\n\n    const savePhotoF = (photo: File) => {\n        dispatch(savePhoto(photo))\n    }\n\n    const saveProfileF = async (formData: ProfileType) => {\n        await dispatch(saveProfile(formData))\n        setEditMode(false)\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n\n    const uploadMyMainPhoto = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length)\n            savePhotoF(e.target.files[0])\n    }\n\n    return (\n        <div className={s.wrapper}>\n            <div>\n                <img className={s.ava}\n                     src={!profile.photos.large ? \"https://s3.amazonaws.com/37assets/svn/765-default-avatar.png\" : profile.photos.large}/><br/>\n                {props.isOwner && <input className={s.uploadPhoto} onChange={uploadMyMainPhoto} type={\"file\"}/>}\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatusF}/>\n                {editMode ? <ProfileDataForm  profile={profile} saveProfileF={saveProfileF}/> :\n                    <ProfileData profile={profile} setEditMode={setEditMode} isOwner={props.isOwner}\n                                 editMode={editMode}/>}\n            </div>\n\n        </div>\n\n    )\n}\n\nconst ProfileDataForm = (props: { saveProfileF: (profile: ProfileType) => void , profile: ProfileType}) => {\n\n    return <Formik\n        initialValues={props.profile}\n        onSubmit={(values: ProfileType) => {\n            props.saveProfileF(values)\n        }}\n    >\n        {(props: any) => {\n            return (\n            <Form onSubmit={props.handleSubmit}>\n                <Button htmlType=\"submit\" type=\"ghost\">Save</Button>\n                <Input placeholder=\"FullName\" name=\"fullName\" onChange={props.handleChange}\n                       value={props.values.fullName}/>\n                <Input placeholder=\"AboutMe\" name=\"aboutMe\" onChange={props.handleChange} value={props.values.aboutMe}/>\n                <Checkbox name=\"lookingForAJob\" value={props.values.lookingForAJob}>lookingForAJob</Checkbox>\n                <Input placeholder=\"lookingForAJobDescription\" name=\"lookingForAJobDescription\"\n                       onChange={props.handleChange} value={props.values.lookingForAJobDescription}/>\n                <div>\n                    <b>Contacts</b>: {Object.keys(props.values.contacts).map(key => {\n                    return <div key={key} >\n                        <b>{key}: <Input name={\"contacts.\" + key} value={props.values.contacts[key]} placeholder={key}/></b>\n                    </div>})}\n                </div>\n\n            </Form>\n        )}}\n    </Formik>\n}\n\n\nconst ProfileData = (props: { profile: ProfileType, isOwner: boolean, editMode: boolean, setEditMode: (val: boolean) => void }) => {\n    return <div style={{marginLeft: 20}}>\n        {props.isOwner && !props.editMode &&\n        <Button type={\"ghost\"} onClick={() => props.setEditMode(true)} color={\"red\"}>Edit</Button>}\n        <h2 style={{marginLeft: 0}}>{props.profile.fullName}</h2>\n        <p>looking for a job : {props.profile.lookingForAJob ? \"yes\" : \"no\"}</p>\n        <p>looking for a job description : {props.profile.lookingForAJobDescription}</p>\n        <div>\n            <h3>Contacts</h3>\n            <div style={{marginLeft: 20}}>\n                {Object.keys(props.profile.contacts).map((key: any) => {\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\n                })}\n            </div>\n\n        </div>\n    </div>\n}\n\n\ntype PropsTypes = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Contact: FC<PropsTypes> = ({contactTitle, contactValue}) => {\n    return <p>{contactTitle}: {contactValue ? <a href={contactValue} target=\"_blank\" style={{color: 'green'}}>{contactValue}</a> : <span style={{color: 'red'}}>нету</span>}</p>\n}\n\nexport default ProfileInfo","import s from \"./Post.module.css\";\nimport React, {FC} from \"react\";\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: FC<PropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://i.stack.imgur.com/rRslI.png?s=328&g=1\"/>\n            {props.message}\n\n            <div className={s.like}>\n                <button className={s.likeActive}> ♥</button>\n                {props.likesCount}\n            </div>\n\n        </div>)\n}\n\nexport default Post","import s from \"./MyPosts.module.css\";\nimport React, {FC} from \"react\";\nimport Post from \"./Post/Post\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {createField, Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {PostType} from \"../../../types/types\";\n\nconst maxLength = maxLengthCreator(50)\n\ntype AddNewPostFormValuesTypes = {\n    newPostText: string\n}\ntype AddNewPostFormValuesTypesKeys = keyof AddNewPostFormValuesTypes\n\nlet AddNewPostForm: FC<InjectedFormProps<AddNewPostFormValuesTypes>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            {createField<AddNewPostFormValuesTypesKeys>(\"PostText\", s.textar, \"textarea\", \"newPostText\", Textarea, [required, maxLength])}<br/>\n            <button type=\"submit\">Add Post</button>\n        </form>\n    )\n}\n\nconst AddNewPostsForm = reduxForm<AddNewPostFormValuesTypes>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\n\nexport type MapStatePropsType = {\n    posts: Array<PostType>\n}\n\nexport type MapDispatchPropsType = {\n    addPosts: (newPostText: string) => void\n}\n\nlet MyPosts: FC<MapStatePropsType & MapDispatchPropsType> = React.memo(props => {\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\n\n\n    let onAddPosts = (values: {newPostText: string}) => {\n        props.addPosts(values.newPostText)\n    }\n\n    return <div>\n        My posts\n        <AddNewPostsForm onSubmit={onAddPosts}/>\n        <div>\n            {postsElements}\n        </div>\n    </div>\n})\n\n\nexport default MyPosts","import React from \"react\";\nimport {actions} from \"../../../redux/profile_reducer\";\nimport MyPosts, {MapDispatchPropsType, MapStatePropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux_store\";\n\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.ProfilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType,{}, AppStateType>(mapStateToProps,{\n    addPosts: actions.addPostActionCreator\n}) (MyPosts);\n\nexport default MyPostsContainer","import React, {FC} from \"react\";\nimport s from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\ntype MapPropsType = {\n    isOwner: boolean\n}\n\n\n\nconst Profile: FC<MapPropsType> = (props) => {\n    return (\n        <div className={s.bodydiv}>\n            <div>\n                <img width=\"100%\" className={s.item}\n                     src=\"https://images.unsplash.com/photo-1509225770129-fbcf8a696c0b?ixlib=rb-1.2.1&auto=format&fit=crop&w=1959&q=80\"/>\n            </div>\n            <div className={s.profile}>\n\n                <ProfileInfo isOwner={props.isOwner}/>\n\n                <MyPostsContainer />\n            </div>\n        </div>\n    )\n}\n\nexport default Profile","import React, {ComponentType, FC, useEffect} from \"react\";\nimport Profile from \"./Profile\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUserProfile, getUserStatus} from \"../../redux/profile_reducer\";\nimport {compose} from \"redux\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux_store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\ntype PathParamsType = {\n    userId: string\n}\n\nconst ProfileContainer: FC<RouteComponentProps<PathParamsType>> = (props) => {\n    const id = useSelector((state: AppStateType) => state.auth.id)\n\n    const dispatch = useDispatch()\n\n    const refreshProfile = () => {\n        let userId: number | null = +props.match.params.userId\n        if (!userId) {\n            userId = id\n            if (!userId) {\n                props.history.push(\"/login\")\n            }\n        }\n\n        dispatch(getUserProfile(userId as number))\n        dispatch(getUserStatus(userId as number))\n    }\n\n    useEffect(() => {\n        refreshProfile()\n    }, [])\n\n    useEffect(() => {\n        refreshProfile()\n    }, [id])\n\n    return (\n        <div>\n            <Profile {...props}\n                     isOwner={!props.match.params.userId}/>\n        </div>\n    )\n}\n\n\nexport default compose<ComponentType>(\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n"],"sourceRoot":""}