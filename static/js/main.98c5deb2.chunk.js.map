{"version":3,"sources":["api/profile-api.ts","redux/profile_reducer.ts","components/Header/Header.module.css","redux/dialogs_reducer.ts","assets/images/ava.jpg","assets/images/Spinner.svg","common/prelooader/Preloader.module.css","api/api.ts","serviceWorker.ts","redux/sidebar_reducer.ts","utils/object-helpers.ts","api/users- api.ts","redux/users_reducer.ts","api/auth-api.ts","api/security-api.ts","redux/auth_reducer.ts","redux/app_reducer.ts","redux/redux_store.ts","common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users_selectors.ts","components/Users/UseraSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","pages/Chat/ChatPage.tsx","App.tsx","index.tsx","components/Users/Users.module.css","common/prelooader/Preloader.tsx"],"names":["profileAPI","userId","instance","get","then","response","data","status","put","file","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUsersProfile","setUsersStatus","deletePost","postId","setUserPhoto","photos","getUserProfile","dispatch","a","getUserStatus","updateUserStatus","resultCode","savePhoto","saveProfile","getState","auth","profileReducer","state","action","filter","p","module","exports","dialogs","name","messages","addNewMessage","newMessageBody","dialogsReducer","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","followed","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","count","payload","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","authAPI","email","password","rememberMe","captcha","securityAPI","res","login","isAuth","captchaUrl","authentication","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","RootReducer","combineReducers","ProfilePage","DialogsPage","Sidebar","UsersPage","app","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","props","defaultCurrent","style","marginLeft","showSizeChanger","onChange","onPageChanged","total","User","user","className","s","flex_wrapper","avafoll","to","avaAllign","alt","ava","src","small","userPhotos","disabled","some","onClick","description","usersGet","createSelector","pageSizeGet","totalUsersCountGet","currentPageGet","isFetchingGet","followingInProgressGet","getUsersFilterGet","Option","Select","userSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","findDiv","marginBottom","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","width","height","defaultValue","value","title","htmlType","shape","icon","SearchOutlined","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","page","query","push","pathname","follows","bind","unfollows","setCurrentPage","pageNumber","block","key","Preloader","BasicExample","marginRight","CaptchaIsRequired","length","stopSubmit","_error","placeholder","handleChange","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","marginTop","HeaderApp","menu","Item","cursor","danger","quit","header","overlay","placement","size","Navbar","Sider","mode","defaultSelectedKeys","defaultOpenKeys","borderRight","ProfileOutlined","MessageOutlined","UserOutlined","WechatOutlined","ChatPage","Chat","useState","ws","setWs","wsTemp","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","span","pull","Messages","messagesEndRef","useRef","setMessages","current","scrollIntoView","behavior","messageHandler","e","prevMessages","JSON","parse","overflowY","n","index","ref","Message","photo","color","userName","AddNewMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","TextArea","currentTarget","resize","send","ProfileContainer","lazy","DialogsContainer","AppContainer","connect","withRouter","prom","Promise","all","Header","padding","margin","minHeight","fallback","path","render","Login","textAlign","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","Spinner","preloader"],"mappings":"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","file":"static/js/main.98c5deb2.chunk.js","sourcesContent":["import {instance, ResponsesType} from \"./api\";\nimport {PhotosType ,ProfileType} from \"../types/types\";\n\ntype SavePhotosType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getUserProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data)\n    },\n    getUserStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(response => response.data)\n    },\n    updateUserStatus(status: string) {\n        return instance.put<ResponsesType>(`profile/status`, {status: status}).then(response => response.data)\n    },\n    updateUserPhoto(file: any) {\n        const formData = new FormData();\n        formData.append(\"image\", file)\n        return instance.put<ResponsesType<SavePhotosType>>(`/profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => response.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<ResponsesType>(`/profile`, profile).then(response => response.data);\n    }\n}","import {PhotosType, PostType, ProfileType} from \"../types/types\";\nimport {profileAPI} from \"../api/profile-api\";\nimport {BaseThunkType, InferActionsType} from \"./redux_store\";\n\n\ntype initialStateType = typeof initialState\nlet initialState = {\n    posts: [\n        {id: 1, message: 'What is your name?', likesCount: 12},\n        {id: 2, message: 'My name is Andrew', likesCount: 24},\n        {id: 3, message: 'Hi', likesCount: 15},\n        {id: 4, message: 'Hi', likesCount: 2},\n        {id: 5, message: 'My friend', likesCount: 6},\n        {id: 6, message: 'Yes', likesCount: 19},\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: \"\",\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\n\n    switch (action.type) {\n        case 'ADD-POST': {\n            let newPostText = action.newPostText\n            return {\n                ...state,\n                posts: [{id: 9, message: newPostText, likesCount: 0}, ...state.posts],\n            }\n        }\n        case 'SET_USER_PROFILE': {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n        case 'SET_USERS_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'DELETE_POST': {\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId),\n            }\n        }\n        case 'UPLOAD_PHOTO': {\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'ADD-POST', newPostText} as const),\n    setUsersProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\n    setUsersStatus: (status: string) => ({type: 'SET_USERS_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'DELETE_POST', postId} as const),\n    setUserPhoto: (photos: PhotosType) => ({type: 'UPLOAD_PHOTO', photos} as const)\n}\n\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType>\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getUserProfile(userId)\n    dispatch(actions.setUsersProfile(data))\n}\n\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getUserStatus(userId)\n    dispatch(actions.setUsersStatus(data))\n}\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateUserStatus(status)\n    if (data.resultCode === 0) {\n        dispatch(actions.setUsersStatus(status))\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateUserPhoto(file)\n    if (data.resultCode === 0) {\n        dispatch(actions.setUserPhoto(data.data.photos))\n    }\n}\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.id\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0 && userId != null){\n        dispatch(getUserProfile(userId))\n    }\n}\n\n\n\n\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3gfaV\",\"quit\":\"Header_quit__327E1\"};","import {InferActionsType} from \"./redux_store\";\n\n\nexport type dialogType = {\n    id: number\n    name: string\n}\n\nexport type messageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n        dialogs: [\n            {id: 1, name: 'Andrew'},\n            {id: 2, name: 'Mark'},\n            {id: 3, name: 'Victor'},\n            {id: 4, name: 'Vasia'},\n            {id: 5, name: 'Sasha'},\n            {id: 6, name: 'Petya'},\n        ] as Array<dialogType>,\n        messages: [\n            {id: 1, message: 'Hi'},\n            {id: 2, message: 'My name is Andrew'},\n            {id: 3, message: 'Hi, me name is Vasia'},\n            {id: 4, message: 'Yes'},\n            {id: 5, message: 'No'},\n            {id: 6, message: 'My friend'},\n            {id: 7, message: 'Yes'},\n            {id: 8, message: 'Yo'},\n        ] as Array<messageType>,\n}\n\nexport type initialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\n\n\n\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\n    switch (action.type) {\n        case 'ADD-MESSAGE': {\n            let newMessageBody = action.newMessageBody\n            return  {\n                ...state,\n                messages: [{id: 9, message: newMessageBody}, ...state.messages],\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\n\nexport const actions = {\n    addNewMessage : (newMessageBody: string) => ({type:'ADD-MESSAGE', newMessageBody} as const)\n}\n\n\n\n\nexport default dialogsReducer;","module.exports = __webpack_public_path__ + \"static/media/ava.0aa8581c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner.36376a0c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__1CeCc\"};","import axios from \"axios\";\nimport {UserType} from \"../types/types\";\n\nexport const instance = axios.create({\n    withCredentials: true,\n    headers : {\n        \"API-KEY\" : \"91cf8020-06af-48f1-9986-c7ac90bd7f5a\"\n    },\n    baseURL : \"https://social-network.samuraijs.com/api/1.0/\"\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n    CaptchaIsRequired = 10\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string\n}\n\nexport type ResponsesType<D={}> = {\n    data: D\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {}\n\ntype initialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\n\n    return state;\n}\n\nexport default sidebarReducer;","import {UserType} from '../types/types';\n\n// todo if crash replace with any\nexport const updateObjectInArray = (items: Array<UserType>, itemId: number, objPropName: string, newObjProps: boolean) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId)\n            return {...u, followed : newObjProps}\n        return u;\n    })\n}\n","import {GetItemsType, instance, ResponsesType} from \"./api\";\nimport {FilterType} from '../redux/users_reducer';\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number, filter: FilterType) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${filter.term}` + (filter.friend === null ? '' : `&friend=${filter.friend}`)\n        ).then(response => response.data)\n    },\n    follow(userId: number) {\n        return instance.post<ResponsesType>(`follow/${userId}`).then(response => response.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete<ResponsesType>(`follow/${userId}`).then(response => response.data)\n    },\n}","//import\nimport {UserType} from '../types/types';\nimport {updateObjectInArray} from '../utils/object-helpers';\nimport {Dispatch} from 'redux';\nimport {BaseThunkType, InferActionsType} from './redux_store';\nimport {usersAPI} from '../api/users- api';\nimport {ResponsesType} from '../api/api';\n\n\n//initialization of state\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>, // uID\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\nexport type initialStateType = typeof initialState\n\n//switch by action type\nconst usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n\n    switch (action.type) {\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', true)\n            }\n\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', false)\n            }\n\n        case 'SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                /*followingInProgress: action.followingInProgress\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)*/\n            }\n        }\n        default:\n            return state;\n    }\n}\n\ntype ActionsTypes = InferActionsType<typeof actions>\nexport type FilterType = typeof initialState.filter\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId,\n    } as const),\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\n}\n//action creator\n\n//thunk creator\ntype ThunkType = BaseThunkType<ActionsTypes>\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\n    dispatch(actions.toggleIsFetching(true));\n    dispatch(actions.setFilter(filter));\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter)\n    dispatch(actions.toggleIsFetching(false))\n    dispatch(actions.setUsers(data.items))\n    dispatch(actions.setTotalUsersCount(data.totalCount))\n}\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<ResponsesType>, actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingInProgress(true, userId))\n    let data = await apiMethod(userId)\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingInProgress(false, userId))\n}\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n}\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n}\n\n//export\nexport default usersReducer;","import {instance, ResponsesType, ResultCodesEnum} from \"./api\";\n\n\n\ntype MeResponseDataType = {\n        id: number\n        email: string\n        login: string\n}\ntype LoginResponseDataType = {\n    data: {\n        id: number\n    }\n}\nexport const authAPI = {\n    me() {\n        return instance.get<ResponsesType<MeResponseDataType>>(`auth/me`).then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\n        return instance.post<ResponsesType<LoginResponseDataType>>(`auth/login`, {\n            email,\n            password,\n            rememberMe,\n            captcha\n        }).then(response => response.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(response => response.data)\n    }\n}","import {instance} from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from \"../api/auth-api\";\nimport {BaseThunkType, InferActionsType} from \"./redux_store\";\nimport {securityAPI} from \"../api/security-api\";\n\n\nlet initialState = {\n    id: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isFetching: false,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n}\n\ntype initialStateType = typeof initialState\ntype ThunkType = BaseThunkType<ActionType | ReturnType<typeof stopSubmit>>\ntype ActionType = InferActionsType<typeof actions>\n\n\nconst authReducer = (state = initialState, action: ActionType): initialStateType => {\n\n    switch (action.type) {\n        case 'malifor-network/auth/SET_USER_DATA':\n            return {\n                ...state,\n                ...action.payload,\n            }\n        case 'GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nconst actions = {\n    setAuthUserData : (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'malifor-network/auth/SET_USER_DATA', payload: {\n            id,\n            email,\n            login,\n            isAuth,\n        }\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\n\nexport const authentication = (): ThunkType => async (dispatch) => {\n    let data = await authAPI.me()\n    if (data.resultCode === ResultCodesEnum.Success) {\n        let {id, email, login} = data.data\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\n\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(authentication())\n    } else {\n        if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let data = await authAPI.logout()\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;","import {authentication} from \"./auth_reducer\";\nimport {InferActionsType} from \"./redux_store\";\n\nlet initialState = {\n    initialized: false,\n}\nexport type initialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): initialStateType  => {\n\n    switch (action.type) {\n        case 'INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\nconst actions = {\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS'} as const)\n}\n\n\nexport const initializeApp = () => (dispatch: any) => {\n    let prom = dispatch(authentication());\n\n    Promise.all([prom])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n/*export const initializeApp = () => async (dispatch) => {\n    await dispatch(authentication());\n    dispatch(initializedSuccess());\n};*/\n\nexport default appReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile_reducer\";\nimport dialogsReducer from \"./dialogs_reducer\";\nimport sidebarReducer from \"./sidebar_reducer\";\nimport usersReducer from \"./users_reducer\";\nimport authReducer from \"./auth_reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./app_reducer\";\n\nlet RootReducer = combineReducers({\n    ProfilePage: profileReducer,\n    DialogsPage: dialogsReducer,\n    Sidebar: sidebarReducer,\n    UsersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    form: formReducer,\n})\n\ntype RootReducerType = typeof RootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsType<T> = T extends {[key: string] : (...args: any[]) => infer U } ? U : never\nexport type BaseThunkType<A extends Action,R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(RootReducer, composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n));\n\n\nexport default store;","import React, {FC} from \"react\";\nimport {Pagination} from \"antd\";\n\ntype PropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n}\n\nconst Paginator: FC<PropsType> = (props) => {\n\n    return <Pagination defaultCurrent={2}  style={{marginLeft: 200}} pageSize={5} showSizeChanger={false} onChange={props.onPageChanged} total={props.totalUsersCount} />\n}\n\nexport default Paginator","import React, {FC} from \"react\";\nimport s from \"./Users.module.css\";\nimport userPhotos from \"../../assets/images/ava.jpg\";\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../types/types\";\nimport {Button} from \"antd\";\n\n\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n\n\n\n    return <div>\n                    <div className={s.flex_wrapper}>\n                        <div className={s.avafoll}>\n                            <NavLink to={'/profile/' + user.id} className={s.avaAllign} >\n                                <img alt='ava' className={s.ava}\n                                     src={user.photos.small != null ? user.photos.small : userPhotos}/>\n                            </NavLink>\n                            <br/>\n                            {user.followed ?\n                                <Button type={'primary'} disabled={followingInProgress.some(id => id === user.id)}   onClick={() => {\n                                    unfollow(user.id)\n                                }}>Unfollow</Button>\n                                : <Button type={'primary'} disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                                    follow(user.id)\n                                }}>Follow</Button>}\n                        </div>\n\n                        <div className={s.description}>\n                            <div><span className={s.name}>{user.name}</span>\n                                <p className={s.status}>{user.status}</p></div>\n                            <span className={s.location}> {\"user.location.country\"}<br/>{\"user.location.city\"}</span>\n                        </div>\n                    </div>\n                </div>\n}\n\nexport default User","import {createSelector} from \"reselect\";\nimport { AppStateType } from \"./redux_store\";\n\nconst usersGetStupid = (state: AppStateType) => {\n    return state.UsersPage.users\n}\n\nexport const usersGet = createSelector( usersGetStupid, (users) =>  {\n    return users;\n})\n\nexport const pageSizeGet = (state: AppStateType) => {\n    return state.UsersPage.pageSize\n}\n\nexport const totalUsersCountGet = (state: AppStateType) => {\n    return state.UsersPage.totalUsersCount\n}\n\nexport const currentPageGet = (state: AppStateType) => {\n    return state.UsersPage.currentPage\n}\n\nexport const isFetchingGet = (state: AppStateType) => {\n    return state.UsersPage.isFetching\n}\n\nexport const followingInProgressGet = (state: AppStateType) => {\n    return state.UsersPage.followingInProgress\n}\n\nexport const getUsersFilterGet = (state: AppStateType) => {\n    return state.UsersPage.filter\n}\n","import s from './Users.module.css';\nimport { Formik} from 'formik';\nimport React, {FC} from 'react';\nimport {FilterType} from '../../redux/users_reducer';\nimport {useSelector} from \"react-redux\";\nimport {getUsersFilterGet} from \"../../redux/users_selectors\";\nimport {Button, Dropdown, Menu, Tooltip} from \"antd\";\nimport {SearchOutlined} from \"@ant-design/icons\";\nimport {Form, Input, Select} from \"formik-antd\";\n\nconst {Option} = Select\n\nconst userSearchFormValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\ntype FormType = {\n    term: string\n    friend: \"true\" | 'false' | 'null'\n}\n\nexport const UsersSearchForm: FC<PropsType> = React.memo((props) => {\n\n    const filter = useSelector(getUsersFilterGet)\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter = {\n            term: values.term,\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\n        }\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div className={s.findDiv} style={{marginLeft: 160, marginBottom: 30}}>\n        <Formik\n            enableReinitialize={true}\n            initialValues={{term: filter.term, friend: String(filter.friend) as \"true\" | 'false' | 'null'}}\n            validate={userSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form >\n                    <Input name=\"term\" style={{width: 300, height: 34}}/>\n                    <Select name=\"friend\" style={{width: 120, height: 34, marginLeft: 10, marginBottom: 2}}  defaultValue=\"null\" >\n                        <Option value=\"null\" >All</Option>\n                        <Option value=\"true\">Friends</Option>\n                        <Option value=\"false\">Not Friends</Option>\n                    </Select>\n                    <Tooltip title=\"search\">\n                        <Button type=\"primary\" htmlType={\"submit\"} style={{marginLeft: 10}} shape=\"circle\" icon={<SearchOutlined/>}/>\n                    </Tooltip>\n\n\n                </Form>\n            )}\n        </Formik>\n\n    </div>\n})\n\n\n\n\n","import React, {FC, useEffect} from 'react';\nimport s from './Users.module.css';\nimport Paginator from '../../common/Paginator/Paginator';\nimport User from './User';\nimport {UsersSearchForm} from './UseraSearchForm';\nimport {follow, unfollow, FilterType, getUsers, actions} from '../../redux/users_reducer';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    currentPageGet, followingInProgressGet,\n    getUsersFilterGet,\n    pageSizeGet,\n    totalUsersCountGet,\n    usersGet\n} from \"../../redux/users_selectors\";\nimport { useHistory } from 'react-router-dom';\nimport * as queryString from \"querystring\";\n\n\ntype  QueryParamsType = {term?: string, friend?: string, page?: string}\nconst Users: FC = () => {\n    const totalUsersCount = useSelector(totalUsersCountGet)\n    const currentPage = useSelector(currentPageGet)\n    const pageSize = useSelector(pageSizeGet)\n    const filter = useSelector(getUsersFilterGet)\n    const users = useSelector(usersGet)\n    const followingInProgress = useSelector(followingInProgressGet)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n\n\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as {term: string, friend: string, page: string}\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if(parsed.page) actualPage = +parsed.page\n        if(parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        if(parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null' ? null : parsed.friend === 'true' ? true : false}\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if(!!filter.term) query.term = filter.term\n        if(filter.friend !== null) query.friend = String(filter.friend)\n        if(currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n    const follows = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const unfollows = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n    const setCurrentPage = (pageNumber: number) => {\n        dispatch(actions.setCurrentPage(pageNumber))\n    }\n\n\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(getUsers(pageNumber, pageSize, filter))\n        setCurrentPage(pageNumber)\n    }\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsers(1, pageSize, filter))\n        setCurrentPage(currentPage)\n    }\n\n    return <div>\n        <UsersSearchForm  onFilterChanged={onFilterChanged}/>\n        <Paginator totalUsersCount={totalUsersCount}\n                   pageSize={pageSize}\n                   currentPage={currentPage}\n                   onPageChanged={onPageChanged}/>\n\n        <div className={s.block}>\n            <h2>Users</h2>\n            {users.map(u => <User user={u}\n                                        followingInProgress={followingInProgress}\n                                        unfollow={unfollows}\n                                        follow={follows}\n                                        key={u.id}/>)}\n        </div>\n    </div>\n}\n\n\nexport default Users","import React, {FC} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport Users from \"./Users\";\nimport Preloader from \"../../common/prelooader/Preloader\";\nimport {isFetchingGet} from '../../redux/users_selectors';\n\n\n\ntype UsersPagePropsType = {}\n\nconst UsersPage: FC<UsersPagePropsType> = (props) => {\n\n    const isFetching = useSelector(isFetchingGet)\n\n\n    return <>\n        {isFetching ? <Preloader/> : null}\n        <Users/>\n    </>\n}\n\nexport default UsersPage","import React, {FC} from 'react';\nimport {Form, Formik} from 'formik';\nimport {login} from \"../../redux/auth_reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\nimport {Button} from 'antd';\nimport {Input, Checkbox} from \"formik-antd\";\nimport {AppStateType} from \"../../redux/redux_store\";\nimport {Redirect} from \"react-router-dom\";\n\n\nconst BasicExample: FC = () => {\n    const dispatch = useDispatch()\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n\n    if (isAuth){\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (<div>\n            <h1>Login</h1>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    rememberMe: false,\n                    captcha: ''\n                }}\n                onSubmit={() => {}}\n            >\n                {props => (\n                    <Form style={{width: 350, marginLeft: \"auto\", marginRight: \"auto\"}} onSubmit={() => {\n                        dispatch(login(props.values.email, props.values.password, props.values.rememberMe, props.values.captcha))\n                    }}>\n                        <Input placeholder=\"Email\" name=\"email\" style={{width: 320, marginBottom: 10}} onChange={props.handleChange} value={props.values.email}/>\n                        <Input.Password name=\"password\" style={{width: 320}}\n                               onChange={props.handleChange}\n                               value={props.values.password}\n                               placeholder=\"input password\"\n                               iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                        />\n                        <Checkbox name={\"rememberMe\"}>Remember Me</Checkbox>\n                        {captchaUrl && <img src={captchaUrl}/>}\n                        {captchaUrl && <Input name=\"captcha\" placeholder=\"Symbols From Image\" />}\n                        <Button htmlType={\"submit\"} style={{width: 100, marginTop: 10, marginLeft: 100}} type=\"primary\" >Login</Button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\n\n\nexport default BasicExample","import React, {FC, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux_store\";\nimport {Avatar, Button, Dropdown, Menu} from \"antd\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport s from \"./Header.module.css\";\nimport {Header} from \"antd/es/layout/layout\";\nimport {logout} from \"../../redux/auth_reducer\";\nimport {getUserProfile} from \"../../redux/profile_reducer\";\nimport Preloader from \"../../common/prelooader/Preloader\";\n\n\nconst HeaderApp: FC = () => {\n    const login = useSelector((state:AppStateType) => state.auth.login)\n    const id = useSelector((state: AppStateType) => state.auth.id)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const logouter = () => {\n        dispatch(logout())\n    }\n    const isAuth = useSelector((state:AppStateType) => state.auth.isAuth)\n\n    useEffect(() => {\n        if (/*history.location.pathname !== '/profile' && */isAuth)\n            dispatch(getUserProfile(id as number))\n\n    }, [history, id])\n\n    const profile = useSelector((state: AppStateType) => state.ProfilePage.profile)\n\n    const menu = (\n        <Menu>\n            <Menu.Item style={{cursor: \"default\", marginLeft: 5}}>\n                {login}\n            </Menu.Item>\n            <Menu.Item>\n                <Button type={\"primary\"} danger className={s.quit} onClick={logouter}>quit</Button>\n            </Menu.Item>\n        </Menu>\n    )\n\n    if (isAuth && !profile) {\n        return <Preloader/>\n    }\n\n    return <Header className={s.header}>\n        {isAuth ?\n            <Dropdown overlay={menu} placement={\"bottomRight\"}>\n                <Avatar shape=\"square\" size=\"large\" style={{marginLeft: \"auto\"}} src={profile?.photos.small}/>\n            </Dropdown>\n            : <NavLink to={'/login'} className={s.quit}><Button type={\"primary\"}>LOGIN</Button></NavLink>}\n    </Header>\n}\n\n\n\n\n\n\n\nexport default HeaderApp","import React, {FC} from \"react\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport {Layout, Menu} from \"antd\";\nimport {MessageOutlined, UserOutlined, ProfileOutlined, WechatOutlined} from \"@ant-design/icons\";\nimport s from './Navbar.module.css'\n\n\nconst Navbar: FC = () => {\n    const history = useHistory()\n    const pathname = history.location.pathname\n    return <Layout.Sider width={200} className=\"site-layout-background\" >\n\n        <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={ pathname === '/profile' ? ['1'] : pathname === '/dialogs' ? ['2']: pathname === '/users' ? ['3'] : pathname === '/chat' ? ['4'] : ['1'] }\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%', borderRight: 0 }}\n        >\n            <Menu.Item key=\"1\"  icon={<ProfileOutlined />}>\n                <NavLink  to=\"/profile\" >Profile</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"2\"  icon={<MessageOutlined />}>\n                <NavLink to=\"/dialogs\">Messages</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"3\"  icon={<UserOutlined />}>\n                <NavLink to=\"/users\" >Users</NavLink>\n            </Menu.Item>\n            <Menu.Item key=\"4\"  icon={<WechatOutlined />}>\n                <NavLink to=\"/chat\" >Chat</NavLink>\n            </Menu.Item>\n        </Menu>\n    </Layout.Sider>\n}\n\nexport default Navbar","import {Avatar, Button, Col, Row} from \"antd\";\r\nimport React, {Ref, useEffect, useRef, useState} from \"react\";\r\nimport {FC} from \"react\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport Preloader from \"../../common/prelooader/Preloader\";\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\n\r\nexport const ChatPage: FC = () => {\r\n\r\n\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat = () => {\r\n    const [ws, setWs] = useState<WebSocket | null>(null)\r\n\r\n\r\n    useEffect(() => {\r\n        let wsTemp: WebSocket\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n\r\n        const createChannel = () => {\r\n\r\n            wsTemp?.removeEventListener('close', closeHandler)\r\n            wsTemp?.close()\r\n\r\n            wsTemp = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            setWs(wsTemp)\r\n            wsTemp.addEventListener('close', closeHandler)\r\n        }\r\n        createChannel()\r\n\r\n        return () => {\r\n            wsTemp.removeEventListener('close', closeHandler)\r\n            wsTemp.close()\r\n        }\r\n    }, [])\r\n\r\n\r\n    return <div>\r\n        <Row>\r\n            <Col span={18} push={6}>\r\n\r\n            </Col>\r\n            <Col span={6} pull={18}>\r\n                <Messages ws={ws}/>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <AddNewMessageForm ws={ws}/>\r\n        </Row>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nconst Messages: FC<{ ws: WebSocket | null }> = ({ws}) => {\r\n    const messagesEndRef = useRef(null)\r\n    const [messages, setMessages] = useState<Array<MessageType>>([])\r\n    const scrollToBottom = () => {\r\n        // @ts-ignore\r\n        messagesEndRef.current.scrollIntoView({behavior: \"smooth\"})\r\n    }\r\n\r\n    useEffect(scrollToBottom, [messages]);\r\n\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: any) => {\r\n            setMessages((prevMessages) => [...prevMessages, ...JSON.parse(e.data)])\r\n        };\r\n        ws?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            ws?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [ws])\r\n\r\n    if (messages === [])\r\n        return <Preloader/>\r\n    else\r\n        return <div style={{height: 400, overflowY: \"auto\", width: 500}}>\r\n            {messages.map((n: MessageType, index) => <Message key={index} message={n}/>)}\r\n            <div ref={messagesEndRef}/>\r\n        </div>\r\n}\r\n\r\nconst Message: FC<{ message: MessageType }> = ({message}) => {\r\n\r\n    return <div>\r\n        <Avatar src={message.photo}/>\r\n        <span style={{color: \"cornflowerblue\", marginLeft: 5, marginBottom: 7}}>{message.userName}</span>\r\n        <p style={{marginLeft: 20}}>{message.message}</p>\r\n    </div>\r\n}\r\n\r\nconst AddNewMessageForm: FC<{ ws: WebSocket | null }> = ({ws}) => {\r\n    const [message, setMessage] = useState('')\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n\r\n    useEffect(() => {\r\n        let openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        ws?.addEventListener('open', openHandler)\r\n\r\n        return () => {\r\n            ws?.removeEventListener('open', openHandler)\r\n        }\r\n    }, [ws])\r\n\r\n    const sendMessage = () => {\r\n        if (!message)\r\n            return;\r\n\r\n        ws?.send(message)\r\n        setMessage('')\r\n    }\r\n    return <div>\r\n        <TextArea onChange={(e) => setMessage(e.currentTarget.value)} value={message} style={{resize: 'none'}}/>\r\n        <Button disabled={ws === null || readyStatus !== 'ready'} onClick={sendMessage} type={'primary'}>Send</Button>\r\n    </div>\r\n}","import React, {FC, lazy, Suspense, useEffect} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport UsersPage from \"./components/Users/UsersContainer\";\nimport Login from \"./components/Login/Login\";\nimport Header from \"./components/Header/Header\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport {initializeApp} from \"./redux/app_reducer\";\nimport Preloader from \"./common/prelooader/Preloader\";\nimport {Layout} from \"antd\";\nimport {Content, Footer} from \"antd/es/layout/layout\";\nimport store, {AppStateType} from \"./redux/redux_store\";\nimport {connect, Provider, useDispatch, useSelector} from \"react-redux\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {ChatPage} from \"./pages/Chat/ChatPage\";\n\n//lazy import work only with default export\n//const Login = lazy(() => import('./components/Login/Login'));\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\n\n\nconst App: FC = () => {\n    const initialized = useSelector((state: AppStateType) => state.app.initialized)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [])\n\n    if (!initialized) {\n    return <Preloader/>\n    }\n\n    return (\n        <Layout >\n            <Header/>\n            <Layout>\n                <Navbar/>\n                <Layout style={{ padding: '0 24px 24px' }}>\n                    <Content\n                        className=\"site-layout-background\"\n                        style={{\n                            padding: 24,\n                            margin: 0,\n                            minHeight: 280,\n                        }}>\n                        <Suspense fallback={<Preloader />}>\n                            <Route path=\"/profile/:userId?\" render={() =>\n                                <ProfileContainer/>}/>\n                            <Route path=\"/dialogs\" render={() =>\n                                <DialogsContainer/>}/>\n                            <Route path=\"/users\" render={() => <UsersPage/>}/>\n                            <Route path=\"/login\" render={() => <Login/>}/>\n                            <Route path=\"/chat\" render={() => <ChatPage/>}/>\n                        </Suspense>\n                    </Content>\n                </Layout>\n\n            </Layout>\n            <Footer style={{ textAlign: 'center' }}>Malifor Design 2077</Footer>\n        </Layout>)\n}\n\n\nlet AppContainer =  connect(withRouter)(App)\n\n\nlet SamuraiJSApp: FC = () => {\n    return <BrowserRouter >\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp\n","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux_store\";\nimport ReactDOM from \"react-dom\";\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\n\n// @ts-ignore\nwindow.store = store\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Users_block__3rR-m\",\"avaAllign\":\"Users_avaAllign__3NUHz\",\"flex_wrapper\":\"Users_flex_wrapper__2vPtu\",\"ava\":\"Users_ava__10LpP\",\"description\":\"Users_description__RvrE3\",\"location\":\"Users_location__1uL17\",\"btn\":\"Users_btn__3Krax\",\"find\":\"Users_find__1_yMz\",\"findDiv\":\"Users_findDiv__1C0wK\"};","import Spinner from \"../../assets/images/Spinner.svg\";\nimport React, {FC} from \"react\";\nimport s from \"./Preloader.module.css\"\n\nlet Preloader: FC = () => {\n    return <div>\n        <img src={Spinner} className={s.preloader}/>\n    </div>\n}\n\nexport default Preloader"],"sourceRoot":""}