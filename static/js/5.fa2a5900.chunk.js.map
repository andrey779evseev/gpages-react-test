{"version":3,"sources":["utils/validators/validators.ts","common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","children","meta","touched","error","hasError","Textarea","props","input","createField","placeholder","className","type","name","component","validators","validate","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","module","exports","DialogItem","s","dialog","src","item","id","activeClassName","active","Message","mava","message","text","AddMessageReduxForm","reduxForm","form","clearfix","onSubmit","handleSubmit","clip","textar","forward","Dialogs","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","vl","footer","values","addNewMessage","newMessageBody","DialogsContainer","compose","DialogsPage","actions"],"mappings":"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","file":"static/js/5.fa2a5900.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => void\n\nexport const required: FieldValidatorType = (value) => {\n    if (value)\n        return undefined;\n\n    return \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength)\n        return `Max length is ${maxLength} symbols`;\n\n    return undefined\n}","import React, {FC} from \"react\";\nimport s from \"./FormsControls.module.css\";\nimport {\n    Field,\n    WrappedFieldProps,\n} from \"redux-form\";\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\n\n\nconst FormControl: FC<WrappedFieldProps> = ({children, meta: {touched, error},  }) => {\n    const hasError = touched && error\n    return (\n        <div>\n            {children}\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\n\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\n    //const hasError = props.meta.touched && props.meta.error\n    return (\n        <FormControl {...props}><textarea  {...props.input}/></FormControl>\n    )\n}\n\nexport const Input: FC<WrappedFieldProps> = (props) => {\n    //const hasError = props.meta.touched && props.meta.error\n    return (\n        <FormControl {...props}><input {...props.input}/></FormControl>\n    )\n}\n\n\n\nexport function createField<FormKeysType extends string> (placeholder: string,\n                            className: string,\n                            type: string,\n                            name: FormKeysType,\n                            component: FC<WrappedFieldProps>,\n                            validators: Array<FieldValidatorType>) {\n    return (\n        <div>\n            <Field component={component} className={className} type={type} name={name} placeholder={placeholder}\n                   validate={validators}/>\n        </div>\n    )\n}","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux_store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\ntype MapStatePropsType = ReturnType<typeof mapStateToPropsForRedirect>\n\nexport const withAuthRedirect = (Component: ComponentType) => {\n    class RedirectComponent extends React.Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth ) return <Redirect to={\"/login\"}/>;\n\n            return <Component {...this.props}/>\n        }\n    }\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Uczb\",\"dialogsItems\":\"Dialogs_dialogsItems__C0N1d\",\"dialog\":\"Dialogs_dialog__366PC\",\"active\":\"Dialogs_active__1tDPW\",\"messages\":\"Dialogs_messages__HwE5R\",\"message\":\"Dialogs_message__2pbcr\",\"vl\":\"Dialogs_vl__2y67Q\",\"item\":\"Dialogs_item__2fHb-\",\"mava\":\"Dialogs_mava__1hmDt\",\"footer\":\"Dialogs_footer__1tLqX\",\"clearfix\":\"Dialogs_clearfix__3xjKd\",\"textar\":\"Dialogs_textar__3_YIF\",\"forward\":\"Dialogs_forward__yEZWf\",\"clip\":\"Dialogs_clip__3TiT5\"};","import React, {FC} from \"react\";\nimport s from \"./../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    id :number\n    name: string\n}\n\nconst DialogItem: FC<PropsType> = (props) => {\n    return <div className={s.dialog}>\n        <img src=\"https://rezoleg.ru/images/avatar/1_ULYowpbnr0VtDEqJ6P7tfQ.png\" className={s.item}/>\n        <NavLink to={\"/dialog/\" + props.id} activeClassName={s.active}>{props.name}</NavLink>\n    </div>\n}\n\nexport default DialogItem","import React, {FC} from \"react\";\nimport s from \"./../Dialogs.module.css\";\n\ntype PropsType = {\n    text: string\n}\n\nconst Message: FC<PropsType> = (props) => {\n    return (\n        <div className={s.mava}>\n            <img className={s.item}\n                 src=\"https://f0.pngfuel.com/png/701/23/black-and-brown-gorilla-vector-illustration-png-clip-art.png\"/>\n\n            <div className={s.message}>{props.text}</div>\n        </div>\n    )\n}\n\nexport default Message","import React, {FC} from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {dialogType, messageType} from \"../../redux/dialogs_reducer\";\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\ntype MapStatePropsType = {\n    dialogs: Array<dialogType>\n    messages: Array<messageType>\n}\ntype MapDispatchPropsType = {\n    addNewMessage: (newMessageBody: string) => void\n}\n\ntype newMessageFormDataType = {\n    newMessageBody: string\n}\n\ntype newMessageFormDataTypeKeys = keyof newMessageFormDataType\n\n\nconst maxLength = maxLengthCreator(30)\n\nlet AddMessageForm: FC<InjectedFormProps<newMessageFormDataType>> = (props) => {\n    return (\n        <form className={s.clearfix} onSubmit={props.handleSubmit}>\n            <button type=\"submit\" className={s.clip}>&#128206;</button>\n            <div>\n               {createField<newMessageFormDataTypeKeys>(\"Enter your message\", s.textar, \"textarea\", \"newMessageBody\", Textarea, [required, maxLength])}\n            </div>\n\n            <button type=\"submit\" className={s.forward}>&#8594;</button>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<newMessageFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\n\nconst Dialogs: FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n\n    let messagesElements = props.messages.map(m => <Message text={m.message} key={m.id}/>)\n\n\n    let addNewMessage = (values: {newMessageBody: string}) => {\n        props.addNewMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={s.vl}></div>\n\n            <div className={s.messages}>\n                {messagesElements}\n\n\n            </div>\n            <footer className={s.footer}>\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\n            </footer>\n\n        </div>\n    )\n}\n\n\nexport default Dialogs","import React, {ComponentType} from \"react\";\nimport {actions} from \"../../redux/dialogs_reducer\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux_store\";\n\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogs: state.DialogsPage.dialogs,\n        messages: state.DialogsPage.messages\n    }\n}\n\nconst DialogsContainer = compose<ComponentType>(\n    connect(mapStateToProps, {addNewMessage: actions.addNewMessage}),\n    withAuthRedirect\n)(Dialogs)\n\nexport default DialogsContainer\n"],"sourceRoot":""}